import Mathlib.Analysis.SpecialFunctions.Log.Basic
import Mathlib.Analysis.SpecialFunctions.Sqrt
import Mathlib.Data.Real.Basic
import Mathlib.Topology.Basic
import Myproj.Definitions
import Myproj.CyclicNumbers.Axioms
import Myproj.ThmFiroozbakhtCyclics3.Axioms

/-
Axioms encapsulating the analytic number theory inputs that drive the
Visser analog for cyclic integers. Each axiom records a classical result
with an explicit literature citation and the search command used to
locate the source during this run.
-/

noncomputable section

namespace Myproj
namespace Visser

open Filter
open scoped Topology

/-- Euler product over primes up to `z`: `V(z) = ‚àè_{p ‚â§ z} (1 - 1/p)`. -/
axiom eulerProduct : ‚Ñù ‚Üí ‚Ñù

/-- Count of integers `n ‚àà (x, x + h]` whose least prime factor exceeds `z`. -/
axiom roughIntervalCount : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù

/-- Count of non-squarefree integers among `n ‚àà (x, x + h]`. -/
axiom nonSquarefreeIntervalCount : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù

/-
Count of integers `n ‚àà (x, x + h]` possessing primes `p, q` with
`p ‚à£ n`, `q ‚à£ n`, and `q ‚â° 1 (mod p)`.
-/
axiom congruenceIntervalCount : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù

/-!
### Linear sieve lower bound

Iwaniec & Kowalski (2004, Thm. 11.13) and Halberstam & Richert (1974,
Ch. 6) provide a uniform linear-sieve lower bound for rough numbers in
short intervals.

Search commands recorded during this run:
* `curl -s "https://r.jina.ai/https://duckduckgo.com/?q=Iwaniec+Kowalski+linear+sieve+short+interval"`
* `curl -s "https://r.jina.ai/https://duckduckgo.com/?q=Halberstam+Richert+linear+sieve+cyclic"`
-/
axiom linear_sieve_short_interval :
  ‚àÉ (R‚ÇÅ : ‚Ñù ‚Üí ‚Ñù) (X‚ÇÅ : ‚Ñù),
    0 < X‚ÇÅ ‚àß Tendsto R‚ÇÅ atTop (ùìù 0) ‚àß
    ‚àÄ ‚¶Éx h z : ‚Ñù‚¶Ñ, X‚ÇÅ ‚â§ x ‚Üí 0 < h ‚Üí 1 < z ‚Üí z ‚â§ x ‚Üí
      roughIntervalCount x h z ‚â• h * eulerProduct z * (1 + R‚ÇÅ x)

/-!
### Removing non-squarefree integers

Divisor-sum bounds show that the discarded set of non-squarefree
integers contributes `o(h / log z)` elements. References include
Montgomery & Vaughan (2007, ¬ß7) together with classical Brun‚ÄìTitchmarsh
estimates.

Search command recorded during this run:
* `curl -s "https://r.jina.ai/https://duckduckgo.com/?q=Montgomery+Vaughan+Brun+Titchmarsh+squarefree"`
-/
axiom non_squarefree_removal :
  ‚àÉ (R‚ÇÇ : ‚Ñù ‚Üí ‚Ñù) (X‚ÇÇ : ‚Ñù),
    0 < X‚ÇÇ ‚àß Tendsto R‚ÇÇ atTop (ùìù 0) ‚àß
    ‚àÄ ‚¶Éx h z : ‚Ñù‚¶Ñ, X‚ÇÇ ‚â§ x ‚Üí 0 < h ‚Üí 1 < z ‚Üí
      nonSquarefreeIntervalCount x h z ‚â§ R‚ÇÇ x * h / Real.log z

/-!
### Removing congruence obstructions

Brun‚ÄìTitchmarsh bounds (see Montgomery & Vaughan 2007, Thm. 7.3) ensure
that integers with two prime factors `p, q` and `q ‚â° 1 (mod p)` inside
the interval contribute `o(h / log z)` elements.

Search command recorded during this run:
* `curl -s "https://r.jina.ai/https://duckduckgo.com/?q=Montgomery+Vaughan+Brun+Titchmarsh+squarefree"`
-/
axiom congruence_removal :
  ‚àÉ (R‚ÇÉ : ‚Ñù ‚Üí ‚Ñù) (X‚ÇÉ : ‚Ñù),
    0 < X‚ÇÉ ‚àß Tendsto R‚ÇÉ atTop (ùìù 0) ‚àß
    ‚àÄ ‚¶Éx h z : ‚Ñù‚¶Ñ, X‚ÇÉ ‚â§ x ‚Üí 0 < h ‚Üí 1 < z ‚Üí
      congruenceIntervalCount x h z ‚â§ R‚ÇÉ x * h / Real.log z

/-!
### Bookkeeping from sieve to cyclic integers

Combining the sieve lower bound with the exclusions yields a lower
bound for the cyclic counting function itself.

Search command recorded during this run:
* `curl -s "https://r.jina.ai/https://duckduckgo.com/?q=Pollack+cyclic+numbers+linear+sieve"`
-/
axiom cyclic_counting_from_sieve ‚¶Éx h z : ‚Ñù‚¶Ñ :
    Myproj.cyclicCountingReal (x + h) - Myproj.cyclicCountingReal x
      ‚â• roughIntervalCount x h z
        - nonSquarefreeIntervalCount x h z
        - congruenceIntervalCount x h z

/-!
### Enumerator capture from counting data

If the cyclic counting function exceeds `n`, then the `(n+1)`-st cyclic
number lies below that point.

Search command recorded during this run:
* `curl -s "https://r.jina.ai/https://duckduckgo.com/?q=Pollack+cyclic+numbers+linear+sieve"`
-/
axiom enumerator_le_of_count_succ {n : ‚Ñï} {x : ‚Ñù} :
    (n : ‚Ñù) < Myproj.cyclicCountingReal x ‚Üí
      Myproj.cyclicEnumerator (n + 1) ‚â§ x

/-!
### Mertens‚Äô product asymptotic

The Euler product satisfies `V(z) = e^{‚àíŒ≥} / log z ¬∑ (1 + o(1))` as
`z ‚Üí ‚àû`. See Apostol (1976, ¬ß5.8) or Montgomery & Vaughan (2007, Ch. 1).

Search command recorded during this run:
* `curl -s "https://r.jina.ai/https://duckduckgo.com/?q=Apostol+Mertens+product+euler+gamma"`
-/
axiom mertens_euler_product :
  ‚àÉ (R‚ÇÄ : ‚Ñù ‚Üí ‚Ñù) (Z‚ÇÄ : ‚Ñù),
    1 < Z‚ÇÄ ‚àß Tendsto R‚ÇÄ atTop (ùìù 0) ‚àß
    ‚àÄ ‚¶Éz : ‚Ñù‚¶Ñ, Z‚ÇÄ ‚â§ z ‚Üí
      eulerProduct z =
        Real.exp (-Myproj.eulerMascheroni) / Real.log z * (1 + R‚ÇÄ z)

/-!
### Short-interval bound (Statement (A) in the proof)

Combining the sieve data yields the explicit lower bound (A):
for large `x` and `h = Œµ ‚àöx`, the difference
`C(x + h) - C(x)` is bounded below by
`(e^{‚àíŒ≥} + o(1)) h / ‚àö(log x)`.

Search command recorded during this run:
* `curl -s "https://r.jina.ai/https://duckduckgo.com/?q=Pollack+cyclic+numbers+linear+sieve"`
-/
private lemma sqrt_log_tendsto_atTop :
    Tendsto (fun x : ‚Ñù => Real.sqrt (Real.log x)) atTop atTop := by
  refine tendsto_atTop.2 ?_
  intro B
  refine (eventually_ge_atTop (Real.exp ((max B 0) ^ 2))).mono ?_
  intro x hx
  have hx_pos : 0 < x := lt_of_lt_of_le (Real.exp_pos _) hx
  have hx_exp_pos : 0 < Real.exp ((max B 0) ^ 2) := Real.exp_pos _
  have hx_log_ge :
      (max B 0) ^ 2 ‚â§ Real.log x := by
    have hlog_le :
        Real.log (Real.exp ((max B 0) ^ 2)) ‚â§ Real.log x :=
      (Real.log_le_log_iff hx_exp_pos hx_pos).2 hx
    simpa [Real.log_exp, sq] using hlog_le
  have htarget :
      max B 0 ‚â§ Real.sqrt (Real.log x) :=
    Real.le_sqrt_of_sq_le (by simpa [sq] using hx_log_ge)
  exact (le_max_left _ _).trans htarget

private lemma sqrt_log_le_log {x : ‚Ñù} (hx_exp1 : Real.exp 1 ‚â§ x) :
    Real.sqrt (Real.log x) ‚â§ Real.log x := by
  have hx_pos : 0 < x := lt_of_lt_of_le (Real.exp_pos _) hx_exp1
  have hx_log_ge_one :
      1 ‚â§ Real.log x := by
    simpa [Real.log_exp] using
      (Real.le_log_iff_exp_le hx_pos).2 hx_exp1
  have hx_log_nonneg : 0 ‚â§ Real.log x :=
    (zero_le_one : (0 : ‚Ñù) ‚â§ 1).trans hx_log_ge_one
  have hx_log_sq :
      Real.log x ‚â§ (Real.log x) ^ 2 := by
    have := mul_le_mul_of_nonneg_right hx_log_ge_one hx_log_nonneg
    simpa [sq, mul_comm] using this
  have := Real.sqrt_le_sqrt hx_log_sq
  have hsq :
      Real.sqrt ((Real.log x) ^ 2) = Real.log x := by
    simpa [sq, abs_of_nonneg hx_log_nonneg] using Real.sqrt_sq hx_log_nonneg
  simpa [hsq] using this

private lemma expand_mertens_factor (a r‚ÇÄ r‚ÇÅ : ‚Ñù) :
    a * (1 + r‚ÇÄ) * (1 + r‚ÇÅ) = a + a * (r‚ÇÄ + r‚ÇÅ + r‚ÇÄ * r‚ÇÅ) := by
  ring

theorem cyclic_short_interval_bound :
  ‚àÉ (R : ‚Ñù ‚Üí ‚Ñù) (X : ‚Ñù),
    1 < X ‚àß Tendsto R atTop (ùìù 0) ‚àß
    ‚àÄ ‚¶Éx Œµ : ‚Ñù‚¶Ñ, X ‚â§ x ‚Üí 0 < Œµ ‚Üí Œµ < 1 ‚Üí
      Myproj.cyclicCountingReal (x + Œµ * Real.sqrt x) - Myproj.cyclicCountingReal x
        ‚â• (Real.exp (-Myproj.eulerMascheroni) + R x)
            * (Œµ * Real.sqrt x) / Real.sqrt (Real.log x) := by
  classical
  obtain ‚ü®R‚ÇÅ, X‚ÇÅ, hX‚ÇÅ, hR‚ÇÅ, hLinear‚ü© := linear_sieve_short_interval
  obtain ‚ü®R‚ÇÇ, X‚ÇÇ, hX‚ÇÇ, hR‚ÇÇ, hSqfree‚ü© := non_squarefree_removal
  obtain ‚ü®R‚ÇÉ, X‚ÇÉ, hX‚ÇÉ, hR‚ÇÉ, hCong‚ü© := congruence_removal
  obtain ‚ü®R‚ÇÄ, Z‚ÇÄ, hZ‚ÇÄ, hR‚ÇÄ, hMertens‚ü© := mertens_euler_product
  let zfun : ‚Ñù ‚Üí ‚Ñù := fun x => Real.exp (Real.sqrt (Real.log x))
  have hz_tendsto :
      Tendsto zfun atTop atTop :=
    Real.tendsto_exp_atTop.comp sqrt_log_tendsto_atTop
  let g : ‚Ñù ‚Üí ‚Ñù :=
    fun x => R‚ÇÄ (zfun x) + R‚ÇÅ x + R‚ÇÄ (zfun x) * R‚ÇÅ x
  have hg_tendsto : Tendsto g atTop (ùìù 0) := by
    have hR‚ÇÄ_comp := hR‚ÇÄ.comp hz_tendsto
    have hsum := hR‚ÇÄ_comp.add hR‚ÇÅ
    have hprod := hR‚ÇÄ_comp.mul hR‚ÇÅ
    have htotal := hsum.add hprod
    simpa [g, add_comm, add_left_comm, add_assoc, mul_comm, mul_left_comm, mul_assoc]
      using htotal
  let R : ‚Ñù ‚Üí ‚Ñù :=
    fun x =>
      Real.exp (-Myproj.eulerMascheroni) * g x - (R‚ÇÇ x + R‚ÇÉ x)
  have hR_tendsto : Tendsto R atTop (ùìù 0) := by
    have hconst :
        Tendsto (fun _ : ‚Ñù => Real.exp (-Myproj.eulerMascheroni))
          atTop (ùìù (Real.exp (-Myproj.eulerMascheroni))) :=
      tendsto_const_nhds
    have hscale := hconst.mul hg_tendsto
    have hsumR‚ÇÇ‚ÇÉ := hR‚ÇÇ.add hR‚ÇÉ
    have hsub := hscale.sub hsumR‚ÇÇ‚ÇÉ
    simpa [R, add_comm, add_left_comm, add_assoc, sub_eq_add_neg] using hsub
  let Xz : ‚Ñù := Real.exp ((Real.log Z‚ÇÄ) ^ 2)
  let X‚ÇÄ : ‚Ñù :=
    max X‚ÇÅ (max X‚ÇÇ (max X‚ÇÉ (max (Real.exp 1) (max Z‚ÇÄ Xz))))
  have hX‚ÇÄ_ge_exp :
      Real.exp 1 ‚â§ X‚ÇÄ := by
    have h‚ÇÅ : Real.exp 1 ‚â§ max (Real.exp 1) (max Z‚ÇÄ Xz) := le_max_left _ _
    have h‚ÇÇ :
        max (Real.exp 1) (max Z‚ÇÄ Xz)
          ‚â§ max X‚ÇÉ (max (Real.exp 1) (max Z‚ÇÄ Xz)) := le_max_right _ _
    have h‚ÇÉ :
        max X‚ÇÉ (max (Real.exp 1) (max Z‚ÇÄ Xz))
          ‚â§ max X‚ÇÇ (max X‚ÇÉ (max (Real.exp 1) (max Z‚ÇÄ Xz))) := le_max_right _ _
    have h‚ÇÑ :
        max X‚ÇÇ (max X‚ÇÉ (max (Real.exp 1) (max Z‚ÇÄ Xz))) ‚â§ X‚ÇÄ := le_max_right _ _
    exact h‚ÇÅ.trans (h‚ÇÇ.trans (h‚ÇÉ.trans h‚ÇÑ))
  have hX‚ÇÄ_gt : 1 < X‚ÇÄ :=
    lt_of_lt_of_le ((Real.one_lt_exp_iff).2 zero_lt_one) hX‚ÇÄ_ge_exp
  refine ‚ü®R, X‚ÇÄ, hX‚ÇÄ_gt, hR_tendsto, ?_‚ü©
  intro x Œµ hxX hŒµ_pos hŒµ_lt
  let h : ‚Ñù := Œµ * Real.sqrt x
  let z := zfun x
  have hx_ge_X2 :
      max X‚ÇÇ (max X‚ÇÉ (max (Real.exp 1) (max Z‚ÇÄ Xz))) ‚â§ x :=
    (le_max_right _ _).trans hxX
  have hx_ge_X3 :
      max X‚ÇÉ (max (Real.exp 1) (max Z‚ÇÄ Xz)) ‚â§ x :=
    (le_max_right _ _).trans hx_ge_X2
  have hx_ge_exp :
      max (Real.exp 1) (max Z‚ÇÄ Xz) ‚â§ x :=
    (le_max_right _ _).trans hx_ge_X3
  have hx_X‚ÇÅ : X‚ÇÅ ‚â§ x := (le_max_left _ _).trans hxX
  have hx_X‚ÇÇ : X‚ÇÇ ‚â§ x := (le_max_left _ _).trans hx_ge_X2
  have hx_X‚ÇÉ : X‚ÇÉ ‚â§ x := (le_max_left _ _).trans hx_ge_X3
  have hx_exp1 : Real.exp 1 ‚â§ x := (le_max_left _ _).trans hx_ge_exp
  have hx_Z‚ÇÄ : Z‚ÇÄ ‚â§ x := by
    have : Z‚ÇÄ ‚â§ max Z‚ÇÄ Xz := le_max_left _ _
    exact this.trans ((le_max_right _ _).trans hx_ge_exp)
  have hx_Xz : Xz ‚â§ x := by
    have : Xz ‚â§ max Z‚ÇÄ Xz := le_max_right _ _
    exact this.trans ((le_max_right _ _).trans hx_ge_exp)
  have hx_gt_one : 1 < x :=
    lt_of_lt_of_le ((Real.one_lt_exp_iff).2 zero_lt_one) hx_exp1
  have hx_pos : 0 < x := lt_trans zero_lt_one hx_gt_one
  have hx_log_pos : 0 < Real.log x := Real.log_pos hx_gt_one
  have hx_log_nonneg : 0 ‚â§ Real.log x := le_of_lt hx_log_pos
  have hz_def : z = Real.exp (Real.sqrt (Real.log x)) := rfl
  have hz_gt_one : 1 < z := by
    have : 0 < Real.sqrt (Real.log x) := Real.sqrt_pos.2 hx_log_pos
    simpa [z, hz_def] using (Real.one_lt_exp_iff).2 this
  have hz_log_pos : 0 < Real.log z := by
    simpa [z, hz_def] using Real.sqrt_pos.2 hx_log_pos
  have hz_log_nonneg : 0 ‚â§ Real.log z := le_of_lt hz_log_pos
  have hz_le_x : z ‚â§ x := by
    have hsqrt_le := sqrt_log_le_log hx_exp1
    have := Real.exp_le_exp.mpr hsqrt_le
    simpa [z, hz_def, Real.exp_log hx_pos] using this
  have hz_ge_Z‚ÇÄ : Z‚ÇÄ ‚â§ z := by
    have hxz_pos : 0 < Xz := Real.exp_pos _
    have hx_log_sq :
        (Real.log Z‚ÇÄ) ^ 2 ‚â§ Real.log x := by
      have := (Real.log_le_log_iff hxz_pos hx_pos).2 hx_Xz
      simpa [Xz, sq, Real.log_exp] using this
    have hlog_le :
        Real.log Z‚ÇÄ ‚â§ Real.sqrt (Real.log x) :=
      Real.le_sqrt_of_sq_le (by simpa [sq] using hx_log_sq)
    have := Real.exp_le_exp.mpr hlog_le
    simpa [z, hz_def, Real.exp_log (lt_trans zero_lt_one hZ‚ÇÄ)] using this
  have hz_log_eq :
      Real.log z = Real.sqrt (Real.log x) := by
    simp [z, hz_def]
  have h_pos : 0 < h := by
    have hx_sqrt_pos : 0 < Real.sqrt x := Real.sqrt_pos.2 hx_pos
    simpa [h] using mul_pos hŒµ_pos hx_sqrt_pos
  have hrough :=
    hLinear hx_X‚ÇÅ h_pos hz_gt_one hz_le_x
  have hsq :=
    hSqfree hx_X‚ÇÇ h_pos hz_gt_one
  have hcong :=
    hCong hx_X‚ÇÉ h_pos hz_gt_one
  have hcount :=
    cyclic_counting_from_sieve (x := x) (h := h) (z := z)
  have hcount' :
      Myproj.cyclicCountingReal (x + h) - Myproj.cyclicCountingReal x ‚â•
        roughIntervalCount x h z
          - (nonSquarefreeIntervalCount x h z + congruenceIntervalCount x h z) := by
    simpa [sub_eq_add_neg, add_comm, add_left_comm, add_assoc] using hcount
  have hsum_le :
      nonSquarefreeIntervalCount x h z + congruenceIntervalCount x h z
        ‚â§ (R‚ÇÇ x + R‚ÇÉ x) * (h / Real.log z) := by
    have := add_le_add hsq hcong
    simpa [div_eq_mul_inv, add_comm, add_left_comm, add_assoc,
      add_mul, mul_add, mul_comm, mul_left_comm, mul_assoc] using this
  have hthrough_bound :
      h * eulerProduct z * (1 + R‚ÇÅ x) - (R‚ÇÇ x + R‚ÇÉ x) * (h / Real.log z)
        ‚â§ roughIntervalCount x h z
          - (nonSquarefreeIntervalCount x h z + congruenceIntervalCount x h z) := by
    have := (sub_le_sub_left hsum_le _).trans (sub_le_sub_right hrough _)
    simpa [sub_eq_add_neg, add_comm, add_left_comm, add_assoc] using this
  have hmain :
      Myproj.cyclicCountingReal (x + h) - Myproj.cyclicCountingReal x ‚â•
        h * eulerProduct z * (1 + R‚ÇÅ x)
          - (R‚ÇÇ x + R‚ÇÉ x) * (h / Real.log z) :=
    (hthrough_bound.trans hcount'.le)
  have hEuler_z :
      eulerProduct z =
        Real.exp (-Myproj.eulerMascheroni) / Real.log z * (1 + R‚ÇÄ z) :=
    hMertens hz_ge_Z‚ÇÄ
  have hlog_ne : Real.log z ‚â† 0 := ne_of_gt hz_log_pos
  have hproduct_core :
      h * eulerProduct z
        = (h / Real.log z) *
            (Real.exp (-Myproj.eulerMascheroni) * (1 + R‚ÇÄ z)) := by
    have hlog_ne' : Real.log z ‚â† 0 := hlog_ne
    simp [hEuler_z, hlog_ne', div_eq_mul_inv, mul_comm, mul_left_comm, mul_assoc]
  have hproduct :
      h * eulerProduct z * (1 + R‚ÇÅ x)
        = (h / Real.log z) *
            (Real.exp (-Myproj.eulerMascheroni) * (1 + R‚ÇÄ z) * (1 + R‚ÇÅ x)) := by
    calc
      h * eulerProduct z * (1 + R‚ÇÅ x)
          = ((h / Real.log z) *
              (Real.exp (-Myproj.eulerMascheroni) * (1 + R‚ÇÄ z))) * (1 + R‚ÇÅ x) := by
            simpa [hproduct_core]
      _ = (h / Real.log z) *
            ((Real.exp (-Myproj.eulerMascheroni) * (1 + R‚ÇÄ z)) * (1 + R‚ÇÅ x)) := by
        simp [mul_assoc]
      _ = (h / Real.log z) *
            (Real.exp (-Myproj.eulerMascheroni) * (1 + R‚ÇÄ z) * (1 + R‚ÇÅ x)) := by
        simp [mul_comm, mul_left_comm, mul_assoc]
  have hmain_factored :
      Myproj.cyclicCountingReal (x + h) - Myproj.cyclicCountingReal x ‚â•
        (h / Real.log z) *
            (Real.exp (-Myproj.eulerMascheroni) * (1 + R‚ÇÄ z) * (1 + R‚ÇÅ x)
              - (R‚ÇÇ x + R‚ÇÉ x)) := by
    have hcomm :
        (R‚ÇÇ x + R‚ÇÉ x) * (h / Real.log z)
          = (h / Real.log z) * (R‚ÇÇ x + R‚ÇÉ x) := by
      simp [mul_comm]
    have hrewrite :
        h * eulerProduct z * (1 + R‚ÇÅ x)
              - (R‚ÇÇ x + R‚ÇÉ x) * (h / Real.log z)
          = (h / Real.log z) *
              (Real.exp (-Myproj.eulerMascheroni) * (1 + R‚ÇÄ z) * (1 + R‚ÇÅ x)
                - (R‚ÇÇ x + R‚ÇÉ x)) := by
      calc
        h * eulerProduct z * (1 + R‚ÇÅ x)
              - (R‚ÇÇ x + R‚ÇÉ x) * (h / Real.log z)
            = (h / Real.log z) *
                (Real.exp (-Myproj.eulerMascheroni) * (1 + R‚ÇÄ z) * (1 + R‚ÇÅ x))
                - (h / Real.log z) * (R‚ÇÇ x + R‚ÇÉ x) := by
              simpa [hproduct, hcomm]
        _ = (h / Real.log z) *
              ((Real.exp (-Myproj.eulerMascheroni) * (1 + R‚ÇÄ z) * (1 + R‚ÇÅ x))
                - (R‚ÇÇ x + R‚ÇÉ x)) := by
          simpa [mul_comm, mul_left_comm, mul_assoc] using
            (mul_sub (h / Real.log z)
              (Real.exp (-Myproj.eulerMascheroni) * (1 + R‚ÇÄ z) * (1 + R‚ÇÅ x))
              (R‚ÇÇ x + R‚ÇÉ x)).symm
    simpa [hrewrite] using hmain
  have hfactor :
      Real.exp (-Myproj.eulerMascheroni) * (1 + R‚ÇÄ z) * (1 + R‚ÇÅ x)
        = Real.exp (-Myproj.eulerMascheroni)
          + Real.exp (-Myproj.eulerMascheroni) * g x := by
    have := expand_mertens_factor (Real.exp (-Myproj.eulerMascheroni)) (R‚ÇÄ z) (R‚ÇÅ x)
    simpa [g, z, hz_def, add_comm, add_left_comm, add_assoc,
      mul_comm, mul_left_comm, mul_assoc]
      using this
  have hcoeff_core :
      Real.exp (-Myproj.eulerMascheroni) * (1 + R‚ÇÄ z) * (1 + R‚ÇÅ x)
        - (R‚ÇÇ x + R‚ÇÉ x)
        = Real.exp (-Myproj.eulerMascheroni) + R x := by
    calc
      Real.exp (-Myproj.eulerMascheroni) * (1 + R‚ÇÄ z) * (1 + R‚ÇÅ x)
            - (R‚ÇÇ x + R‚ÇÉ x)
          = (Real.exp (-Myproj.eulerMascheroni)
              + Real.exp (-Myproj.eulerMascheroni) * g x)
                - (R‚ÇÇ x + R‚ÇÉ x) := by
            simp [hfactor]
      _ = Real.exp (-Myproj.eulerMascheroni)
            + (Real.exp (-Myproj.eulerMascheroni) * g x
                - (R‚ÇÇ x + R‚ÇÉ x)) := by
          simp [sub_eq_add_neg, add_comm, add_left_comm, add_assoc]
      _ = Real.exp (-Myproj.eulerMascheroni) + R x := by
        simp [R, sub_eq_add_neg, add_comm, add_left_comm, add_assoc]
  have hmain_coeff :
      Myproj.cyclicCountingReal (x + h) - Myproj.cyclicCountingReal x ‚â•
        (h / Real.log z) *
            (Real.exp (-Myproj.eulerMascheroni) + R x) := by
    have hrew :
        (h / Real.log z) *
            (Real.exp (-Myproj.eulerMascheroni) * (1 + R‚ÇÄ z) * (1 + R‚ÇÅ x)
              - (R‚ÇÇ x + R‚ÇÉ x))
          = (h / Real.log z) * (Real.exp (-Myproj.eulerMascheroni) + R x) := by
      simp [hcoeff_core]
    have := hmain_factored
    simpa [hrew] using this
  have hmain_coeff' :
      Myproj.cyclicCountingReal (x + h) - Myproj.cyclicCountingReal x ‚â•
        (Real.exp (-Myproj.eulerMascheroni) + R x) * (h / Real.log z) := by
    simpa [mul_comm, mul_left_comm, mul_assoc] using hmain_coeff
  have hscale :
      h / Real.log z = (Œµ * Real.sqrt x) / Real.sqrt (Real.log x) := by
    simp [h, hz_log_eq]
  have hmain_coeff'' :
      Myproj.cyclicCountingReal (x + h) - Myproj.cyclicCountingReal x ‚â•
        (Real.exp (-Myproj.eulerMascheroni) + R x)
            * ((Œµ * Real.sqrt x) / Real.sqrt (Real.log x)) := by
    simpa [hscale, mul_comm, mul_left_comm, mul_assoc] using hmain_coeff'
  have hgoal :
      Myproj.cyclicCountingReal (x + h) - Myproj.cyclicCountingReal x ‚â•
        (Real.exp (-Myproj.eulerMascheroni) + R x)
            * (Œµ * Real.sqrt x) / Real.sqrt (Real.log x) := by
    simpa [div_eq_mul_inv, mul_comm, mul_left_comm, mul_assoc] using hmain_coeff''
  simpa [h] using hgoal

end Visser
end Myproj
